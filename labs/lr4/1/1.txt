  1. Определите прагматику функций, приведённых ниже:

  (1) cdr:: [Int] -> [Int]
      cdr lst | null lst = lst
              | True     = tail lst

  - "Безопасное" извлечение хвоста из списка.

  (2) doub:: [Int] -> [Int]
      doub lst | null lst = lst
               | True     = head lst : lst

  - Создать список с двумя подряд идущими элементами
  - с равными значениями в начале, каждый из которых
  - равен голове исходного списка.
  - Прим: если список пустой, вернуть его же (не возвращает ошибку).

  (3) posl lst | null lst = error "Недопустимый аргумент!"
               | True     = (head.reverse) lst

  - Найти последний элемент списка.
  - Прим: сообщение об ошибке не содержит указаний на место
  - ее возникновения (confusing).

  (4) xinLst:: [Int] -> Bool
      xinLst lst | null lst = undefined
                 | True     = elem (head lst) (tail lst)

  - Выяснить, содержится ли в списке хотя бы один дубликат его головы.

  (5) swap lst =
           reverse (head lst :
                   (reverse (head (reverse lst):
                            reverse (tail (reverse (tail lst)))))

  - Поменять местами голову и хвост списка.
  - Прим: забыта закрывающая скобка.
